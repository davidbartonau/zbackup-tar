#!/usr/bin/env python3
# The MIT License (MIT)
#
# Copyright (c) 2014 OneIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from collections import OrderedDict
import sys, argparse, os, time, datetime, hashlib, subprocess, io, tarfile, fnmatch, re, csv

"""
Global values

dPath -> Directory path to be backed up
nBackup -> Path of the new backup 
iPath -> Absolute path of "info" file within the zbackup directory structure
"""

dPath = "" 
nBackup = ""
iPath = ""

excludes = []
mDict = {}

refreshCycles = 0
currentCycle = 1


DEBUG = 0



"""
Read the header of a CSV
    First Row is Header
        Literal HEADER
        Version Number
        Backup Cycle
"""
def readCSVHeader (row):
    global currentCycle

    header = row[0]

    if header  != "HEADER":
        raise Exception("First line of manifest is not HEADER")

    versionNumber = int(row[1])
    currentCycle = int(row[2]) + 1
    DEBUG and print ("Version Number: ", versionNumber, " ", currentCycle)



"""
Read previous backup CSV manifest during the creation of a new backup

Input:

absPath -> Absolute path of the old manifest
aFlags -> Additional flags to be passed to zbackup

Output:

mDict -> A dictionary with the following key value pair

Key : Value -> filename : [ Element Modification time since epoch in seconds, 
                            Last Backup time since epoch in seconds, 
                            Size, 
                            Relative path of new backup, 
                            pFlag -> Values mentioned below,
                            UID,
                            GID,
                            Int value to indicate whether its a file or a directory: 1 means file, 0 means directory
                        ]

Note:
Changing the ownership of a directory doesn't alter its modification time. Thats why we need to keep track of UID and GID as well.    

pFlag values can be 0, 1, 2, 3, 4                         
After all the processing is done the function "printInfo" will use this flag value to print the relevant info

0 -> Initialized value
1 -> Needs to be retained
2 -> Needs to be stored
3 -> The element has been modified
4 -> The element needs to be backed up again
"""
def readCSVManifestFC(absPath, aFlags):
    
    mDict = {}

    data = readManifestFromBackup(absPath, aFlags).decode('utf-8')

    if not data:
        raise Exception(-1)
    
    sIO = io.StringIO(data)
    csvReader = csv.reader(sIO, dialect = 'unix', quoting = csv.QUOTE_MINIMAL)    

    """

    A row in the backup CSV manifest
        Element Name, 
        Size, 
        Element Modification time since epoch in seconds, 
        Last Backup time since epoch in seconds,  
        Relative path of the backup from which the file can be extracted from, 
        UID, 
        GID,
        Boolean value to indicate whether its a file or a directory
    """

    firstRow = True

    for row in csvReader:    
        if firstRow:
            readCSVHeader (row)
            firstRow = False
        else:
            mDict[row[0]]=[int(row[2]), int(row[3]), int(row[1]), row[4], 0, int(row[5]), int(row[6]), int(row[7])]                
        
    return mDict 



"""
Read Associated manifest of the backup to be restored

Input:

absPath -> Absolute path of the backup manifest
includes -> A list of glob patterns to be restored
aFlags -> Additional flags to be passed to zbackup

Output:

mDict -> A dictionary with the following key value pair
Key : Value -> Relative path of the backup : A set of files to be extracted from this backup

isFileMap -> Another dictionary with the following key value pair
Key : Value -> Name of the element to be restored : A boolean value to indicate whether its a file or a directory
"""
def readCSVManifestFR(absPath, includes, aFlags):

    mDict = {}
    isFileMap = {}
    iList = generatePatterns(includes)

    data = readManifestFromBackup(absPath, aFlags).decode('utf-8')

    if not data:
        raise Exception(-1)
    
    sIO = io.StringIO(data)    
    csvReader = csv.reader(sIO, dialect = 'unix', quoting = csv.QUOTE_MINIMAL)    
 
    """
    A row in the backup CSV manifest
        Element Name, 
        Size, 
        Element Modification time since epoch in seconds, 
        Last Backup time since epoch in seconds,  
        Relative path of the backup from which the file can be extracted from, 
        UID, 
        GID,
        Integer value to indicate whether its a file or a directory: 1 means file, 0 means directory
    """        
    firstRow = True

    for row in csvReader:
        if firstRow:
            readCSVHeader (row)
            firstRow = False
        else:
            """
            Element Name        
            """
            name = row[0]

            if not matchPatterns(name, iList):
                continue

            """
            Relative path of the backup from which the file can be extracted from        
            """            
            key = row[4]

            if not mDict.__contains__(key):
                mDict[key] = set()

            mDict[key].add(name)

            """
            Boolean value to indicate whether its a file or a directory
            """ 
            isFileMap[name] = int(row[7])				
	    
    return mDict, isFileMap    



"""
Create an in memory CSV manifest based on the dictionary while creating a new backup and return it

Input:

mDict -> A dictionary with the following key value pair

Key : Value -> filename : [ Element Modification time since epoch in seconds, 
                            Last Backup time since epoch in seconds, 
                            Size, 
                            Relative path of new backup, 
                            pFlag -> Values mentioned below,
                            UID,
                            GID,
                            Integer value to indicate whether its a file or a directory: 1 means file, 0 means directory
                        ]

Output:
The raw data associated with CSV manifest
"""
def getCSVManifestFromDict(mDict):     
       
    sDict = OrderedDict(sorted(mDict.items()))

    sIO = io.StringIO()
    csvWriter = csv.writer(sIO, dialect = 'unix', quoting = csv.QUOTE_MINIMAL)

    data = []
    data.append (["HEADER", 1, currentCycle])

    for k, v in sDict.items():
        DEBUG >= 2 and print ("getCSVManifestFromDict:", v[4], " ", k, " => ", v)

        if v[4] > 0:       

            """
            A row in the backup CSV manifest

            Element Name, 
            Size, 
            Element Modification time since epoch in seconds, 
            Last Backup time since epoch in seconds,  
            Relative path of the backup from which the file can be extracted from, 
            UID, 
            GID,
            Integer value to indicate whether its a file or a directory: 1 means file, 0 means directory
            """                        
            
            data.append([k, v[2], v[0], v[1], v[3], v[5], v[6], v[7]])

    csvWriter.writerows(data)

    return sIO.getvalue()       



"""
A function to determine whether an element should be extracted or not while restoration

Input:

eName -> Name of the element
listElements -> List of elements to be extracted from this backup
bFPath -> Associated relative backup path where this element can be found
isFileMap -> A map to find out whether the element is a file or a directory

Output:
True/False
"""           
def shouldExtract(eName, listElements, bFPath, isFileMap):
    
    if eName in listElements:

        if(isFileMap[eName]):
            print(eName+"\tEXTRACTED from "+bFPath)

        return True

    return False



"""
A function to extract files from a given backup

Input:

absPath -> Absolute path of the backup
aFlags -> List of flags to be passed to zbackup
relPath -> Relative path of backup (Obtained making use iPath (The location of "info" file within zbackup dir structure))
lElements -> List of elements to be extracted from this backup
isFileMap -> A dictionary to find out whether a particular element is a file or a directory

Output:
None
""" 
def extractFilesFromBackup(absPath, aFlags, relPath, lElements, isFileMap):

    with open(os.devnull, "w") as fnull:

        if(aFlags):
            shellCmd = "zbackup restore --silent "+absPath+' '+' '.join(aFlags)+' | cat'
        else:
            shellCmd = "zbackup restore --silent "+absPath+' | cat'         

        proc = subprocess.Popen(shellCmd, shell = True, stdout = subprocess.PIPE, stderr = fnull)

        with tarfile.open(mode = "r|", fileobj = proc.stdout) as tar:  

            while True:
                nextTInfo = tar.next();

                if not nextTInfo:
                    break

                if(shouldExtract(nextTInfo.name, lElements, relPath, isFileMap)):
                    DEBUG >= 2 and print ("Extract tar file member:", nextTInfo.name)
                    tar.extract(nextTInfo)
                else:
                    DEBUG >= 2 and print ("Skipped tar file member:", nextTInfo.name)

                tar.members=[]
                                                               
            tar.close() 

        proc.communicate()            
        proc.wait()     



"""
A function to get the contents of a backup manifest

Input:

absPath -> Absolute path of the backup manifest
aFlags -> List of flags to be passed to zbackup

Output:
The raw CSV manifest
""" 
def readManifestFromBackup(absPath, aFlags):

    with open(os.devnull, "w") as fnull:

        retString=bytes()

        if(aFlags):
            shellCmd = "zbackup restore --silent "+absPath+' '+' '.join(aFlags)+' | cat'
        else:
            shellCmd = "zbackup restore --silent "+absPath+' | cat'	    	

        proc = subprocess.Popen(shellCmd, shell = True, stdout = subprocess.PIPE, stderr = fnull)

        retString += proc.stdout.read()    

        proc.wait()    
    
    return retString  



"""
A function to create a new backup

The internal filter associated with the tar ("tCFilter") handles most of the stuff

Input:

absPath -> Absolute path of the backup manifest
aFlags -> List of flags to be passed to zbackup

Output:
None
"""     
def createZBackup(absPath, aFlags):

    with open(os.devnull, "w") as fnull:

        if(aFlags):
            cCmd = "zbackup backup --silent "+absPath+" "+' '.join(aFlags)
            proc = subprocess.Popen(cCmd, shell = True, stdin = subprocess.PIPE, stdout = fnull)
        else:
            proc = subprocess.Popen(["zbackup", "backup", "--silent", absPath], stdin = subprocess.PIPE, stdout = fnull)          

        with tarfile.open(mode = "w|", fileobj = proc.stdin) as tar:    
            for root, dirs, files in os.walk (top = dPath):
                dirs.sort ()
                files.sort ()

                DEBUG >= 2 and print ("OS.walk sorted:", root, dirs, files)

                for dir in dirs:
                    fullDir = os.path.join(root, dir)
                    nameInTar = shouldIncludeTarInfoAndRecord (False, fullDir)

                    if nameInTar is not None:
                        DEBUG > 1 and print ("Add dir:", fullDir, " as ", nameInTar)
                        tar.add (name = fullDir, arcname = nameInTar, recursive = False)
                    else:
                        DEBUG > 1 and print ("Skip dir:", fullDir)

                for file in files:
                    fullFile = os.path.join(root, file)
                    nameInTar = shouldIncludeTarInfoAndRecord (True, fullFile)

                    if nameInTar is not None:
                        DEBUG and print ("Add file:", fullFile, " as ", nameInTar)
                        tar.add (name = fullFile, arcname = nameInTar, recursive = False)
                    else:
                        DEBUG and print ("Skip file:", fullFile)

            tar.close ()

        proc.communicate()            
        proc.wait()                  
                


"""
A function to create a new backup manifest

Input:

absPath -> Absolute path of the backup manifest
data -> Raw CSV data
aFlags -> List of flags to be passed to zbackup

Output:
None
"""                 
def createZBackupOfManifest(absPath, data, aFlags):  

    with open(os.devnull, "w") as fnull:

        if(aFlags):
            cCmd = "zbackup backup --silent "+absPath+" "+' '.join(aFlags)
            proc = subprocess.Popen(cCmd, shell = True, stdin = subprocess.PIPE, stdout = fnull, stderr = fnull)
        else:
            proc = subprocess.Popen(["zbackup", "backup", "--silent", absPath], stdin = subprocess.PIPE, stdout = fnull, stderr = fnull)	    	

        proc.stdin.write(data)
                
        proc.communicate()            
        proc.wait()           



"""
A function to obtain a list of regular expressions given a list of glob patterns

Input:
fnPatterns -> List of glob patterns

Output:
pList -> List of regular expressions
"""
def generatePatterns(fnPatterns):

    pList = []

    for x in fnPatterns:

        """
        To excludes all the the elements in the directory as well
        """
        if x[-1] == '/':
            pList.append(fnmatch.translate(x[:-1])[:-7]+"$")
            x = x+'*'

        pList.append(fnmatch.translate(x)[:-7]+"$")

    return pList



"""
A function to check whether a given string matches against any one of the patterns in our list
"""
def matchPatterns(string, pList):

    for pattern in pList:
        if re.search(pattern, string)!=None:
            return True

    return False                                                



"""
Determine if a directory path should be included in the tar.  fullPath the full directory path including the backupRoot

Considers exclusion paths and refresh cycles.

Records that a path has been added by updating the manifest and logging.  fullPath the full directory path including the backupRoot

Return the name of the file in the archive or None if the file should not be archived.

    mDict -> A dictionary with the following key value pair

	Key : Value -> filename : [ Element Modification time since epoch in seconds, 
	                            Last Backup time since epoch in seconds, 
	                            Size, 
	                            Relative path of new backup, 
	                            pFlag -> Values mentioned below,
	                            UID,
	                            GID,
	                            Integer value to indicate whether its a file or a directory: 1 means file, 0 means directory
	                        ]  
                            
    pFlag values can be 0, 1, 2, 3, 4                         
    After all the processing is done the function printInfo will use this flag value to print the relevant info

    0 -> Initialized value
    1 -> Needs to be retained
    2 -> Needs to be stored
    3 -> The element has been modified
    4 -> The element needs to be backed up again                              
"""
def shouldIncludeTarInfoAndRecord (isFile, fullPath):
    # If we are tarring . then we leave the . in front  of the files in the archive
    if fullPath[0] != ".":
        pathInTar = getRelativePath (fullPath, dPath)
    else:
        pathInTar = fullPath

    if matchPatterns(pathInTar, excludes):
        DEBUG >= 2 and print ("Matches excludes")
        return None


    # The file isn't excluded, so we might back it up
    shouldBackupFile = False

    statInfo = os.lstat(fullPath)
    fileUID = statInfo.st_uid
    fileGID = statInfo.st_gid
    fileModTime = statInfo.st_mtime
    fileSize = statInfo.st_size

    if(mDict.__contains__(pathInTar)):
        manifestData = mDict[pathInTar]

        DEBUG >= 2 and print ("This file has been backed up before:", pathInTar, " manifestData:", manifestData)

        # IF File was modified                   or  User ID changed                 or  Group ID changed
        if (int(fileModTime) > manifestData[0]) or  (manifestData[5] != fileUID)  or  (manifestData[6] != fileGID):

            # Modified = 3
            manifestData = [int(fileModTime), int(time.time()), fileSize, getRelativePath(nBackup, iPath), 3, fileUID, fileGID, (1 if isFile else 0)]                    

            mDict[pathInTar] = manifestData
            shouldBackupFile = True

        elif refreshCycles: 
            if shouldBack(currentCycle, pathInTar, manifestData[1]):
                manifestData[1] = int(time.time())            
                manifestData[3] = getRelativePath(nBackup, iPath)   

                # Refreshed = 4
                manifestData[4] = 4                               
                shouldBackupFile = True
    
        if not shouldBackupFile:
            # Retained = 1
            manifestData[4] = 1
            shouldBackupFile = False

    else:
        # Stored first time = 2        
        manifestData = [int(fileModTime), int(time.time()), fileSize, getRelativePath(nBackup, iPath), 2, fileUID, fileGID, (1 if isFile else 0)]

        mDict[pathInTar] = manifestData
        shouldBackupFile = True
        
    DEBUG >= 2 and print ("shouldIncludeTarInfoAndRecord:", pathInTar, " :", shouldBackupFile)

    if shouldBackupFile:
        printInfo(manifestData[4], pathInTar)                    

        return pathInTar
    else:
        return None



"""
Create a new backup based on the processed command line arguments

Input:
pArgs -> Processed command line arguments

Output:
Return code -> 0/Relevant error code
"""
def handleBackupCreation(pArgs):  

    """
    Necessary in order to make changes to global variables
    """
    global iPath, mDict, dPath, excludes, nBackup, refreshCycles, DEBUG
    
    if not hBCreationChecks(pArgs):
        return -1
       
    dPath = pArgs.dPath
    nBackup = os.path.realpath(pArgs.nBackup)    
    
    iPath = getInfoPath(os.path.dirname(nBackup))      
    refreshCycles = pArgs.refreshCycles

    if pArgs.verbosity is not None:
        DEBUG = pArgs.verbosity

    if pArgs.pBackup:
                
        try:
            mDict=readCSVManifestFC(pArgs.pBackup+'.manifest', pArgs.aFlags)
                                    
        except subprocess.CalledProcessError as e:                    
            return e.returncode                    
            
    else:
        mDict = {}

    excludes = []

    if pArgs.excludes:
        excludes = generatePatterns(pArgs.excludes)
    
    try:
            
        createZBackup(nBackup, pArgs.aFlags)                                
        createZBackupOfManifest(nBackup + '.manifest', bytes(getCSVManifestFromDict(mDict), 'UTF-8'), pArgs.aFlags)
                                                                
        return 0        
        
    except subprocess.CalledProcessError as e:                    
        return e.returncode                    



"""
Restore a backup based on the processed command line arguments

Input:
pArgs -> Processed command line arguments

Output:
Return -> 0/Relevant error code
"""    
def handleBackupRestoration(pArgs):   

    if not hBRestorationChecks(pArgs):
        return -1
    
    bPath = os.path.realpath(pArgs.backup)
    iPath = getInfoPath(bPath)
    
    try:
        
        mDict, isFileMap = readCSVManifestFR(bPath + '.manifest', pArgs.includes, pArgs.aFlags)

        for backupFile, listToBeExtracted in mDict.items():
            extractFilesFromBackup(os.path.join(iPath, backupFile), pArgs.aFlags, backupFile, listToBeExtracted, isFileMap)                    
    
    except subprocess.CalledProcessError as e:                    
        return e.returncode     

    return 0                         



"""
A function that returns the zbackup directory path where the "info" file can be found
"""
def getInfoPath(pPath):
        
    if os.path.isfile(os.path.join(pPath, "info")):
        return pPath + "/"
    
    elif os.path.dirname(pPath) != pPath:
        return getInfoPath(os.path.dirname(pPath))
    
    else:
        return ""            



"""
A function to print relevant info while creating a new backup

Input:

index -> A flag
fName -> Filename (The directory info isn't printed out)
"""
def printInfo(index, fName):
    
    if index == 2:
        print(fName+"\tSTORED")
        
    elif index == 3:
        print(fName+"\tUPDATED")
        
    elif index == 4:
        print(fName+"\tREFRESHED")



"""
A function that returns relative path of the first string with respect to the other instead of using os.path.relpath
"""
def getRelativePath(fullPath, pathToBeSubtracted):

    return fullPath.replace(pathToBeSubtracted,"")    




"""
A function to determine whether the element should be backed up again

The backup cycle increases by one each backup to trace the lineage.  Each file has a pseudo-random cycle assigned out of refreshCycles

When the backup cycle hist that number, the file is refreshed.  So all files in cycle 3 will tend to be backed up together.

This overcomes a limitation where small files will not be deduped if they are not backed up next to the same file.

Input:
currentCycle -> Current backup cycle
eName -> The relevant element name
lBTime -> Last backed up epoch time

Output:
True/False
"""    
def shouldBack(currentCycle, eName, lBTime):
    currentRefreshCycle = currentCycle % refreshCycles
    filenameHash = hashlib.sha1(eName.encode('UTF-8')).hexdigest()[:6]
    fileRefreshCycle = (int(filenameHash, 16 ) % refreshCycles)

    DEBUG >= 3 and print ("shouldBack ", eName, " hash:", filenameHash, " intVal:", int(filenameHash, 16 ));
    DEBUG >= 1 and print ("shouldBack ", eName, " currentCycle:", currentCycle, " refreshCycles:", refreshCycles, " fileRefreshCycle:", fileRefreshCycle);

    if currentRefreshCycle == fileRefreshCycle:
        return True
    else:
        return False




"""
Run checks on the processed command line arguments provided to create a new backup
"""    
def hBCreationChecks(pArgs):
        
    if not os.path.isfile(pArgs.pBackup):
        
        if (not pArgs.pBackup == ''):                    
            print('The previous backup file does not exist')
            return False
    
    else:        
    
        if not os.path.isfile(pArgs.pBackup + '.manifest'):
            print('The manifest associated with previous backup file does not exist')
            return False        
    
    if not os.path.isdir(pArgs.dPath):
        print('The directory from which files need to be backed up does not exist')
        return False                                        
    
    fName, fExtension = os.path.splitext(pArgs.nBackup)
        
    if(fExtension != '.tar'):        
        print('The file extension of the new backup should be \'tar\'')
        return False 
    
    return True      



"""
Run checks on the processed command line arguments provided to restore a backup
"""        
def hBRestorationChecks(pArgs):
        
    if not os.path.isfile(pArgs.backup):    
        print('The previous backup file does not exist')
        return False    
    
    if not os.path.isfile(pArgs.backup + '.manifest'):
        print('The manifest associated with previous backup file does not exist')
        return False            
            
    return True



"""
A function used to get a command line argument parser which will be used while creating a new backup
"""
def getCreateArgsParser():
        
    parser = argparse.ArgumentParser(description = 'ZBackupTar backup creation')
    
    parser.add_argument('create', help = 'Option used to create a new zBackup' )         
        
    parser.add_argument('--previousBackup', dest = 'pBackup', metavar = 'FILEPATH', 
        help = 'Path of the previous backup', required = True)
    
    parser.add_argument('--newBackup', dest = 'nBackup', metavar = 'FILEPATH', 
        help = 'Path of the new backup', required = True)        
    
    parser.add_argument('--zbackupArgs', dest = 'aFlags', metavar = 'AF', nargs = '*',
        help = 'Additional flags to create a new backup')    
    
    parser.add_argument('--exclude', dest = 'excludes', action = 'append', metavar = 'EFiles',  
        help = 'Files to be excluded from the backup')
    
    parser.add_argument('--refreshCycles', dest = 'refreshCycles', metavar = 'REFRESHCYCLES', type = float,
        help = 'Refresh files every N backup cycle')   
    
    parser.add_argument('--verbosity', dest = 'verbosity', metavar = 'VERBOSITY', type = int,
        help = 'Debug output: reasonable values are 1, 2')   
    
    parser.add_argument('dPath', metavar = 'DIRPATH', type = str,
        help = 'Path of the directory with the files to be backed up' )     
    
    return parser



"""
A function used to get a command line argument parser which will be used while restoring a backup
"""
def getRestoreArgsParser():
    
    parser = argparse.ArgumentParser(description ='ZBackupTar backup restoration')
    
    parser.add_argument('restore', default ='restore',
        help = 'Option used to restore a zBackup' )        
            
    parser.add_argument('--backup', dest='backup', metavar = 'FILEPATH', 
        help = 'Path of the backup file to be restored', required = True)            
    
    parser.add_argument('--zbackupArgs', dest = 'aFlags', metavar = 'AF', type = str, nargs = '*',
        help = 'Additional flags to create a new backup')
    
    parser.add_argument('--verbosity', dest = 'verbosity', metavar = 'VERBOSITY', type = int,
        help = 'Debug output: reasonable values are 1, 2')   
    
    parser.add_argument('includes', metavar = 'IFiles', nargs = '+', 
    	help = 'Restore the file structure from DIRPATH onwards using the backups')                                      
    
    return parser



def main():  
    
    cParser = getCreateArgsParser()
    rParser = getRestoreArgsParser()
                    
    DEBUG >= 1 and print ("Debug level:", DEBUG)

    if len(sys.argv) > 1:
    
        if sys.argv[1] == 'create':
            
            retCode = handleBackupCreation(cParser.parse_args())
                        
            if retCode != 0:
                raise Exception(retCode)
            
        elif sys.argv[1] == 'restore':
            
            sys.argv.append('*')
            pArgs = rParser.parse_known_args()[0]

            if len(pArgs.includes) > 1:
                del pArgs.includes[-1]        		

            retCode = handleBackupRestoration(pArgs)

            if retCode != 0:
                raise Exception(retCode)            
            
        elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
            
            cParser.print_help()
            rParser.print_help()            
            
        else:
            print('Invalid ZBackup-tar operation. Please use\n')            
            cParser.print_usage()
            rParser.print_usage()                        
            
    else:
        print('ZBackup-tar operation not specified. Please use\n')
        cParser.print_help()
        rParser.print_help()
            
    
if __name__ == "__main__":
    
    main()
